---

- name: establish pre-requisites
  become: true
  package:
    name:
      - snapd
    state: present

- name: node | status
  command: "microk8s status --format=yaml"
  register: _node_status
  changed_when: false
  failed_when: false

- name: node | drain
  when:
    - microk8s_drain_node_on_update
    - _node_status.rc == 0
    - (_node_status.stdout | from_yaml)['microk8s']['running']
    - (_node_status.stdout | from_yaml)['high-availability']['enabled']
    - ((_node_status.stdout | from_yaml)['high-availability']['nodes'] | length) > 2
  command: "microk8s kubectl drain {{ ansible_hostname }} {{ microk8s_drain_extra_args }}"
  notify: uncordon node

- name: package | install
  become: true
  snap:
    name: microk8s
    state: present
    classic: true
    channel: "{{ microk8s_channel }}"

# TODO: workaround for https://github.com/ansible-collections/community.general/issues/1606
- name: package | update
  when: microk8s_update
  become: true
  command: "snap refresh microk8s --channel={{ microk8s_channel }}"
  register: _snap_microk8s_refresh
  changed_when: "'has no updates available' not in _snap_microk8s_refresh.stderr"

- name: system | add user to control group
  become: true
  user:
    name: "{{ ansible_env.USER | default(ansible_user_id) }}"
    groups: microk8s
    append: true

- name: system | reset host connection to reload users
  meta: reset_connection

- name: config | hosts | dir
  become: true
  loop: "{{ microk8s_hosts | dict2items | map(attribute='key') }}"
  file:
    dest: /var/snap/microk8s/current/args/certs.d/{{ item }}
    owner: root
    group: microk8s
    mode: "ug=rwx"
    state: directory
  notify: restart node

- name: config | hosts | setup
  become: true
  loop: "{{ microk8s_hosts | dict2items }}"
  copy:
    dest: /var/snap/microk8s/current/args/certs.d/{{ item.key }}/hosts.toml
    content: "{{ item.value }}"
    owner: root
    group: microk8s
    mode: "ug=rwx"
  notify: restart node

- name: config | component | args
  become: true
  loop: "{{ microk8s_extra_args | dict2items }}"
  blockinfile:
    path: /var/snap/microk8s/current/args/{{ item.key }}
    block: "{{ item.value }}"
    marker: "## {mark} extra args - managed by Ansible"
  notify: restart node

- name: config | component | auto update certificates
  when: microk8s_auto_update_certs
  become: true
  blockinfile:
    path: /var/snap/microk8s/current/args/kubelet
    block: |
      --rotate-certificates=true
      --rotate-server-certificates=true
  notify: restart kubelite

- name: addons | enable
  become: true
  loop: "{{ microk8s_addons }}"
  command: "microk8s enable {{ item }}"
  register: _enable_addon
  changed_when: "'already enabled' not in _enable_addon.stdout"

# TODO: breaking change, is it necessary?
# - name: disable addons
#   become: true
#   loop: "{{ ((_node_status.stdout | from_yaml)['addons'] | selectattr('status','==','enabled') | map(attribute='name') | list)
#             | difference(microk8s_addons | map('split',':') | map('first') | list) }}"
#   command: "microk8s disable {{ item }}"
