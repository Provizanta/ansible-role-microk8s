---

- name: establish pre-requisites
  become: true
  package:
    name:
      - snapd
    state: present

- name: node status
  command: "microk8s status --format=yaml"
  register: _node_status
  changed_when: false
  failed_when: false

- name: drain nodes
  when:
    - microk8s_drain_node_on_update
    - _node_status.rc == 0
    - (_node_status.stdout | from_yaml)['microk8s']['running']
  command: "microk8s kubectl drain {{ ansible_hostname }} {{ microk8s_drain_extra_args }}"
  notify: uncordon node

- name: establish snap package
  become: true
  snap:
    name: microk8s
    state: present
    classic: true
    channel: "{{ microk8s_channel }}"

- name: add user to control group
  become: true
  user:
    name: "{{ ansible_env.USER | default(ansible_user_id) }}"
    groups: microk8s
    append: true

- name: reload users | reset host connection
  meta: reset_connection

- name: config | hosts | dir
  become: true
  loop: "{{ microk8s_hosts | dict2items | map(attribute='key') }}"
  file:
    dest: /var/snap/microk8s/current/args/certs.d/{{ item }}
    owner: root
    group: microk8s
    mode: "ug=rwx"
    state: directory
  notify: restart node

- name: config | hosts | setup
  become: true
  loop: "{{ microk8s_hosts | dict2items }}"
  copy:
    dest: /var/snap/microk8s/current/args/certs.d/{{ item.key }}/hosts.toml
    content: "{{ item.value }}"
    owner: root
    group: microk8s
    mode: "ug=rwx"
  notify: restart node

- name: config | component | args
  become: true
  loop: "{{ microk8s_extra_args | dict2items }}"
  blockinfile:
    path: /var/snap/microk8s/current/args/{{ item.key }}
    block: "{{ item.value }}"
    marker: "## {mark} extra args - managed by Ansible"
  notify: restart node

- name: enable addons
  become: true
  loop: "{{ microk8s_addons }}"
  command: "microk8s enable {{ item }}"
  register: _enable_addon
  changed_when: "'already enabled' not in _enable_addon.stdout"
